<?php

    /*
        Plugin Name: Adaptive Images for WordPress 
        Plugin URI: http://www.nevma.gr
        Description: Resizes your images, according to each user's screen size, to reduce total download time of web pages in mobile devices.
        Version: 0.2.08
        Author: Nevma - Creative Know-How
        Author URI: http://www.nevma.gr
        License: GPL2
        License URI: https://www.gnu.org/licenses/gpl-2.0.html
    */



    // Exit, if file is accessed directly.

    if ( ! defined( 'ABSPATH' ) ) {

        exit; 

    }



global $wprxr_pluginname;
global $wprxr_shortname;
global $wprxr_ai_path;
global $wprxr_ai_user_settings_path;

$wprxr_pluginname = "Adaptive Images";
$wprxr_shortname = "wprxr";
$wprxr_ai_path = plugin_dir_path(__FILE__) . "adaptive-images/ai-main.php";
$wprxr_ai_user_settings_path = plugin_dir_path(__FILE__) . "adaptive-images/ai-user-settings.php";



/**
 * Sets cookie with device screen width.
 * 
 * Outputs a Javascript code in the head of the user page which calculates the devices screen width and saves it in a
 * special cookie. This has to happen as early as possible in the page so that consequent requests for images in the 
 * server will be carrying this cookie and the server can decide correctly what image size to serve.
 * 
 * @author Nevma
 * 
 * @return Nothing really!
 */

function adaptive_images_head_cookie_javascript () { ?>

	<script type = "text/javascript">

		document.cookie = 'resolution=' + Math.max( screen.width, screen.height ) + '; path=/';

	</script> <?php

}



/**
 * This function returns config section of adaptive images php file
 *
 * @return string Config Section of adaptive-images.php
 * @param string $context If set, uses this parameter instead of file contents
 * @author Karlis Bikis 
 **/
function wprxr_get_ai_config( $context = "" )
{
	global $wprxr_ai_user_settings_path;

	if( !$context )
	{
		global $wprxr_ai_path;
		$context = file_get_contents( file_exists($wprxr_ai_user_settings_path) ? $wprxr_ai_user_settings_path :  $wprxr_ai_path );
	}
	preg_match("%/\* ?CONFIG -+ ?\*/\r?\n?(.*)\r?\n?/\* ?END CONFIG%ms", $context, $matches );

	return trim( $matches[1] );
}

/**
 * This function saves new config of adaptive images php file (from the WordPress admin settings page).
 *
 * @return void
 * @param string $val New Config
 * @author Karlis Bikis 
 **/
function wprxr_set_ai_config( $val )
{
	// Get current config
	global $wprxr_ai_path;
	global $wprxr_ai_user_settings_path;

	if ( ! wp_verify_nonce( $_POST['nonce'], 'adaptive-images-save-settings' ) ) {

		return;

	}

	// Nevma

	$settings_code = 
		"<?php " . 
			"\n\n" . 
			"// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED BY THE PLUGIN SETTINGS PAGE.\n\n" .
			"/* CONFIG ----------------------------------------------------------------------------------------------------------- */\n\n" . 
			stripslashes( $val ) . "\n\n" . 
			"/* END CONFIG --------------------------------------------------------------------------------------------------------*/\n\n" . 
			"// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED BY THE PLUGIN SETTINGS PAGE.\n\n" . 
		"?>";

	file_put_contents( $wprxr_ai_user_settings_path, $settings_code ) or die("Cannot write to user settings php file. Check file permissions.");

	add_action( 'admin_notices', 'adaptive_images_admin_notice_settings_saved' );

}


// Nevma

function wprxr_get_config () {

	return array (

		array(  "type" => "open"),

		array(	"name" => "Adaptive-images config",
				"desc" => "Edit config section of adaptive-images.php",
				"id" => $wprxr_shortname . "_ai_config",
				"type" => "textarea",
				"std" => wprxr_get_ai_config(),
				"handler" => "wprxr_set_ai_config" ),

		array(	"name" => "Watch paths for images",
				"desc" => "Enter the paths that you want Adaptive-images Images to watch. Put each path on a new line.",
				"id" => $wprxr_shortname . "_include_paths",
				"type" => "textarea",
				"std" => "/wp-content/uploads/"),

		array(  "type" => "close")

	);

}



function wprxr_add_page()
{

    global $wprxr_pluginname, $wprxr_shortname;

	$pluginname = $wprxr_pluginname;

	// Nevma
	// Initiliaze settings here to start with

	$options = wprxr_get_config();

    if ( $_GET['page'] == 'wprxr' )
    {
        if ( 'save' == $_REQUEST['action'] )
        {
		    foreach ($options as $value)
		    {
		        if( isset( $_REQUEST[ $value['id'] ] ) )
		        {
					// Check if option has custom data handler
					if( isset( $value['handler'] ) && is_callable( $value['handler'] ) )
					{
						$handler = $value['handler'];
						$handler( $_REQUEST[ $value['id'] ] );
						continue;
					}

			    	// Use update_option if no option handler specified
		        	update_option( $value['id'], $_REQUEST[ $value['id'] ]  );
		        }
		        else
		        {
		        	delete_option( $value['id'] );
		        }
			}

        }
    }

    add_options_page("Adaptive Images", "Adaptive Images", 'manage_options', 'wprxr', 'wprxr_page');
}



// Set up the plugin when it is activated
function wprxr_activate()
{
	add_option('wprxr_include_paths', '/wp-content/uploads/');
	
	$new_htaccess = wprxr_htaccess();

	if ( !file_exists(get_home_path() . '.htaccess') ) 
	{
		@fopen(get_home_path() . '.htaccess', 'w') or die("<div id=\"message\" class=\"error\"><strong>No .htaccess file exists, and one could not be created.</strong> To fix this you can: <br> 1. Update permissions for the WordPress root directory to allow write access, or <br> 2. Manually create your .htaccess file with this rewrite block:<br><br> <pre>$new_htaccess</pre></div>");
	}
	
	if ( !is_writable(get_home_path() . '.htaccess') )
	{
		die("<div id=\"message\" class=\"error\"><strong>The permissions on your .htaccess file restrict automatic setup.</strong> To fix this you can: <br> 1. Change permissions on the .htaccess file in your WordPress root directory to allow write access, or <br> 2. Manually add this rewrite block to your .htaccess file: <br><br> <pre>$new_htaccess</pre></div>");
	}
	
	$old_htaccess = file_get_contents(get_home_path() . '.htaccess');
		
	if ( preg_match('/# Adaptive Images.*# END Adaptive Images\n/s', $old_htaccess) )
	{
		$new_htaccess = preg_replace('/# Adaptive Images.*# END Adaptive Images\n/s', $new_htaccess, $old_htaccess);
	}
	
	else
	{
		$new_htaccess .= $old_htaccess;
	}
	
	file_put_contents(get_home_path() . '.htaccess', $new_htaccess) or die("<div id=\"message\" class=\"error\"><strong>Could not write to .htaccess.</div>");
}



// Remove the plugin when it is deactivated
function wprxr_deactivate()
{
	$old_htaccess = file_get_contents(get_home_path() . '.htaccess');
	$new_htaccess = preg_replace('/# Adaptive Images.*# END Adaptive Images\n/s', '', $old_htaccess);
	file_put_contents(get_home_path() . '.htaccess', $new_htaccess);
}



// This function returns the .htaccess rewrite block
function wprxr_htaccess ()
{
	global $wprxr_ai_path;

	$theme_directory = "/".trim(str_replace(str_replace("\\", "/", $_SERVER["DOCUMENT_ROOT"]), '', str_replace("\\", "/", dirname(__FILE__))), "/");

	$wprxr_include_paths =  get_option('wprxr_include_paths');
	
	$includes = explode("\n", $wprxr_include_paths);
    
	$new_htaccess = "# Adaptive Images\n<IfModule mod_rewrite.c>\nRewriteEngine On\n\n# Watch directories:";
	
	$i = 0;
	$length = count($includes) - 1;

	foreach ( $includes as $include )
	{
		if ( $i != $length ) $new_htaccess .= "\nRewriteCond %{REQUEST_URI} " . trim($include) . " [OR]";
		else if ( $i == $length ) $new_htaccess .= "\nRewriteCond %{REQUEST_URI} $include";
		$i++;
	}

	// Nevma
	// Try to determine the relative path of the adaptive images PHP script which will be set in the htaccess file
	$DR = $_SERVER['DOCUMENT_ROOT'];
	$DR = preg_replace( '/\//i', '\/', $DR );
	$DR = preg_replace( '/\./i', '\\.', $DR );
	$image_handling_script = preg_replace( '/' . $DR . '/i', '', __FILE__ ); 
	$image_handling_script = substr( $image_handling_script, 0, strrpos( $image_handling_script, '/', -3 ) );
	$image_handling_script .= '/adaptive-images/ai-main.php';

	$new_htaccess .= "\n\nRewriteRule \.(?:jpe?g|gif|png)$ " . $image_handling_script . " [L]\n</IfModule>\n# END Adaptive Images\n";
	
	return $new_htaccess;
}



// The Adaptive Images settings page
function wprxr_page()
{

	global $wprxr_pluginname, $wprxr_shortname;

	$pluginname = $wprxr_pluginname;

	$options = wprxr_get_config();
	
	$new_htaccess = wprxr_htaccess();

	?>
	<div class="wrap">
	<h2><?php echo $pluginname; ?> settings</h2>

	<?php
		
	    if ( $_REQUEST['saved'] )
	    {
			
			$old_htaccess = file_get_contents(get_home_path() . '.htaccess');
			
			if ( preg_match('/# Adaptive Images.*# END Adaptive Images\n/s', $old_htaccess) )
			{
				$new_htaccess = preg_replace('/# Adaptive Images.*# END Adaptive Images\n/s', $new_htaccess, $old_htaccess);
			}
			else
			{
				$new_htaccess .= $old_htaccess;
			}
			
			file_put_contents(get_home_path() . '.htaccess', $new_htaccess);
			
			echo '<div id="message" class="updated fade"><p><strong>Adaptive Images updated successfully.</strong></p></div>';
	    }
	?>


	
	<form method="post">

	<input type = "hidden" name = "nonce" value = "<?php echo wp_create_nonce( 'adaptive-images-save-settings' ); ?>" />

	<h3>Image cache configuration</h3>

	<?php

	foreach ($options as $value)
	{

		switch ( $value['type'] )
		{

			case "open":
				echo '<table width="100%" border="0" style="padding:10px;">';
			break;

			case "close":
				echo '</table>';
			break;

			case "title":
				echo '<table width="100%" border="0" style="padding:5px 10px;"><tr>';
	    		echo '<td colspan="2"><h3 style="font-family:Georgia,\'Times New Roman\',Times,serif;">' .  $value['name'] . '</h3></td>';
				echo '</tr>';
			break;

			case 'text':
				$value_or_std = (  get_option( $value['id'] ) != "" ) ?  get_option( $value['id'] ) : $value['std'];
				echo '<tr>';
				echo '<td width="20%" rowspan="2" valign="top"><strong>' . $value['name'] . '</strong></td>';
				echo '<td width="80%"><input style="width:90%;" name="' . $value['id'] . '" id="' . $value['id'] . '" type="' . $value['type'] . '" value="' . $value_or_std . '" /></td>';
				echo '</tr>';
				echo '<tr>';
				echo '<td><small>' . $value['desc'] . '</small></td>';
				echo '</tr><tr><td colspan="2" style="margin-bottom:5px;border-bottom:1px dotted #000000;">&nbsp;</td></tr><tr><td colspan="2">&nbsp;</td></tr>';
			break;

			case 'textarea':
				$value_or_std = (  get_option( $value['id'] ) != "" ) ?  get_option( $value['id'] ) : $value['std'];
				echo '<tr>';
				echo '<td width="20%" rowspan="2" valign="top"><strong>' . $value['name'] . '</strong></td>';
				echo '<td width="80%"><textarea name="' . $value['id'] . '" style="width:90%; height:200px;" type="' . $value['type'] . '" cols="" rows="">' . $value_or_std . '</textarea></td>';
				echo '</tr>';
				echo '<tr>';
				echo '<td><small>' . $value['desc'] . '</small></td>';
				echo '</tr><tr><td colspan="2" style="margin-bottom:5px;border-bottom:1px dotted #000000;">&nbsp;</td></tr><tr><td colspan="2">&nbsp;</td></tr>';
			break;

			case 'select':
				echo '<tr>';
				echo '<td width="20%" rowspan="2" valign="top"><strong>' . $value['name'] . '</strong></td>';
				echo '<td width="80%"><select name="' . $value['id'] . '" id="' . $value['id'] . '">';
				foreach ($value['options'] as $option)
				{
					$selected = (  get_option( $value['id'] ) == $option || $option == $value['std']) ? ' selected="selected"' : '';
					echo '<option' . $selected . '>' . $option . '</option>';
				}
				echo '</select></td>';
				echo '</tr>';
				echo '<tr>';
				echo '<td><small>' . $value['desc'] . '</small></td>';
				echo '</tr><tr><td colspan="2" style="margin-bottom:5px;border-bottom:1px dotted #000000;">&nbsp;</td></tr><tr><td colspan="2">&nbsp;</td></tr>';
			break;

			case "checkbox":
				$cheked = ( get_option($value['id'])) ? ' checked="checked"' : '';
				echo '<tr>';
				echo '<td width="20%" rowspan="2" valign="top"><strong>' . $value['name'] . '</strong></td>';
				echo '<td width="80%">';
				echo '<input type="checkbox" name="' . $value['id'] . '" id="' .  $value['id'] . '" value="true"' . $checked . '/>';
				echo '</td>';
				echo '</tr>';
				echo '<tr>';
				echo '<td><small>' . $value['desc'] . '</small></td>';
				echo '</tr><tr><td colspan="2" style="margin-bottom:5px;border-bottom:1px dotted #000000;">&nbsp;</td></tr><tr><td colspan="2">&nbsp;</td></tr>';
			break;

		}
	}

	?>

	<p class="submit">
		<input class = "button-primary" name="save" type="submit" value="Save configuration" />
		<input type="hidden" name="action" value="save" />
	</p>
	</form>



	<h3>Cleanup image cache</h3>

	<p>
		Deletes all files from the image cache directories in order to start the cache fresh and clean. Might take a few moments, if your server is up to it, so be patient. Run multiples times in case of browser timeout, eventually all image cache files will be deleted.
	</p>
	
	<p>
		<?php $result = adaptive_images_dir_size( realpath( dirname( $_SERVER['SCRIPT_FILENAME'] ) . '/../wp-content/' ) . '/cache-ai/' ); ?>
		Cache size: <strong><?php echo adaptive_images_file_size_human( $result['size'] ); ?></strong> (<?php echo $result['files']; ?> files)
	</p>
	
	<p class="submit">
		<a class = "button-primary" href = "?page=<?php echo $wprxr_shortname; ?>&cleanup=true&nonce=<?php echo wp_create_nonce( 'adaptive-images-cleanup-cache' ); ?>" title = "Cleanup image cache">Cleanup image cache</a>
	</p>

	<?php
}



/**
 * Deletes the contents of a directory recursively.
 * 
 * Takes the path of a directory as an argument and traverses it recursively deleting its child files and directories
 * recursively as well.
 * 
 * @author Nevma
 * 
 * @param $dir The directory whose contents to delete recursively.
 * 
 * @return An array with the totals of files and sizes.
 */

function adaptive_images_file_size_human ( $size ) {

	$kilo_byte = 1024;
	$mega_byte = 1024 * $kilo_byte;
	$giga_byte = 1024 * $mega_byte;

	if ( $size < $kilo_byte ) {
		
		return $size . 'bytes';

	} else if ( $size < $mega_byte ) {

		return round( $size / $kilo_byte, 2 ) . 'kb';
	
	} else if ( $size < $giga_byte ) {

		return round( $size / $mega_byte, 2 ) . 'mb';

	} else {

		return round( $size / $giga_byte, 2 ) . 'gb';

	}
} 



/**
 * Deletes the contents of a directory recursively.
 * 
 * Takes the path of a directory as an argument and traverses it recursively deleting its child files and directories
 * recursively as well.
 * 
 * @author Nevma
 * 
 * @param $dir The directory whose contents to delete recursively.
 * 
 * @return An array with the totals of files and sizes.
 */

function adaptive_images_dir_size ( $dir ) {

	static $total_files = 0;
	static $total_size  = 0;

    if ( is_dir( $dir ) && ! is_link( $dir ) ) {

        $objects = scandir( $dir );

        foreach ( $objects as $object ) {

	        if ( $object != "." && $object != ".." ) {

	        	$file = $dir . "/" . $object;

	            if ( filetype( $file ) != "dir" ) { 
	            	
	            	$total_files++;
	            	$total_size += filesize( $file );

	            } else {

	            	adaptive_images_dir_size( $file );

	            }

	        }
        }

    }

	return array( 'files' => $total_files, 'size' => $total_size );

} 



/**
 * Deletes the contents of a directory recursively.
 * 
 * Takes the path of a directory as an argument and traverses it recursively deleting its child files and directories
 * recursively as well.
 * 
 * @author Nevma
 * 
 * @param $dir The directory whose contents to delete recursively.
 * 
 * @return An array with the totals of directories and files deleted so far.
 */

function adaptive_images_rmdir_recursive ( $dir ) {

	static $total_files = 0;
	static $total_dirs  = 0;

    if ( is_dir( $dir ) && ! is_link( $dir ) ) {

        $objects = scandir( $dir );

        foreach ( $objects as $object ) {

	        if ( $object != "." && $object != ".." ) {

	        	$file = $dir . "/" . $object;

	            if ( filetype( $file ) == "dir" ) { 

	            	adaptive_images_rmdir_recursive( $file );
	            	$total_dirs++;

	            } else {

	            	unlink( $file );
	            	$total_files++;

	            }

	        }
        }

  	  	reset( $objects );
    	rmdir( $dir );

    }

	return array( 'files' => $total_files, 'dirs' => $total_dirs );

} 



/**
 * Adaptive images settings successfully saved.
 * 
 * Prints an admin notice message in the settings page that informs the user of the outcome of the settings saving 
 * action was successfull.
 * 
 * @author Nevma
 * 
 * @return Nothing really!
 */

function adaptive_images_admin_notice_settings_saved () { ?>

    <div class="updated">
        <p>
        	Adaptive images settings have been successfully saved!
        </p>
    </div> <?php 

}



/**
 * Image cache successfully cleaned up admin message.
 * 
 * Prints an admin notice message in the settings page that informs the user of the outcome of the images cache 
 * cleanup request.
 * 
 * @author Nevma
 * 
 * @return Nothing really!
 */

function adaptive_images_admin_notice_cache_cleaned () { ?>

    <div class="updated">
        <p>
        	The image cache has been successfully cleaned up! <br>
        	We have deleted <strong><?php echo $_SESSION['result_cleanup'] ? $_SESSION['result_cleanup']['dirs'] : 0; ?></strong> directories 
        	and <strong><?php echo $_SESSION['result_cleanup'] ? $_SESSION['result_cleanup']['files'] : 0; ?></strong> image files in total.
        </p>
    </div> <?php 

    unset( $_SESSION['result_cleanup'] );

}



/**
 * Cleans up image cache.
 * 
 * Cleans up the adaptive images cache by recursively deleting all the directories and iamges files of the cache 
 * directory and down.
 * 
 * @author Nevma
 * 
 * @return Nothing really!
 */

function adaptive_images_cleanup_image_cache () {

	if ( isset( $_GET['cleanup'] ) && $_GET['cleanup'] == 'true' && wp_verify_nonce( $_GET['nonce'], 'adaptive-images-cleanup-cache' ) ) {

		$cache_dir = realpath( dirname( $_SERVER['SCRIPT_FILENAME'] ) . '/../wp-content/' ) . '/cache-ai/';

		$result = adaptive_images_rmdir_recursive( $cache_dir );

		$_SESSION['result_cleanup'] = $result;

		add_action( 'admin_notices', 'adaptive_images_admin_notice_cache_cleaned' );

	}

}



// Add settings link on the WordPress plugins page.
function wprxr_add_settings_link($links, $file)
{
	static $this_plugin;
	
	if ( !$this_plugin )
		$this_plugin = plugin_basename(__FILE__);
	 
	if ( $file == $this_plugin )
	{
		$settings_link = '<a href="options-general.php?page=wprxr">'.__("Settings", "Adaptive Images").'</a>';
		array_unshift($links, $settings_link);
	}
	
	return $links;
}



// Sets up the cookie generating Javascript in the head of the page.

add_action( 'wp_head', 'adaptive_images_head_cookie_javascript', 0 );



// Sets up the adaptive images image cache cleanup action.

add_action( 'admin_init', 'adaptive_images_cleanup_image_cache' );



add_action('admin_menu', 'wprxr_add_page');
register_activation_hook(__FILE__, 'wprxr_activate');
register_deactivation_hook(__FILE__, 'wprxr_deactivate');
add_filter('plugin_action_links', 'wprxr_add_settings_link', 10, 2 );

?>